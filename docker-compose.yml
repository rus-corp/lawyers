networks:
  lawyers_network:
    driver: bridge

services:
  database:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: database
    restart: always
    environment:
      LANG: ru_RU.UTF-8
      LC_ALL: ru_RU.UTF-8
    env_file:
      - backend/.env
    ports:
      - "5432:5432"
    volumes:
      - ./docker_data/psql:/var/lib/postgresql/data
    networks:
      - lawyers_network
  api:
    container_name: api
    build: 
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    ports:
      - "8000:8000"
    volumes:
      - ./docker_data:/app/docker_data
      - ./backend:/app
      - ./docker_data/static:/app/static
      - ./docker_data/media:/app/media
      - ./docker_data/logs:/app/docker_data/logs
    depends_on:
      - database
    command: sh -c "mkdir -p /app/docker_data/logs && gunicorn --access-logfile /app/docker_data/logs/access.log --error-logfile /app/docker_data/logs/error.log lawyers_back.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 240"
    networks:
      - lawyers_network
  web:
    container_name: web
    build:
      context: ./frontend
      dockerfile: Dockerfile
    working_dir: /app
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - lawyers_network

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker_data/certbot:/var/www/certbot
      - ./docker_data/letsencrypt:/etc/letsencrypt
      - ./docker_data/static:/app/static
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - api
      - web
    networks:
      - lawyers_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./docker_data/letsencrypt:/etc/letsencrypt
      - ./docker_data/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1 & wait $!; done;'"
    networks:
      - lawyers_network
  

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - ./docker_data/redis:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lawyers_network

  worker:
    container_name: celery_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    volumes:
      - ./docker_data:/app/docker_data
      - ./docker_data/media:/app/media
    working_dir: /app
    command: sh -c "which celery && celery --version && celery -A lawyers_back worker -l INFO"
    depends_on:
      api:
        condition: service_started
      database:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - lawyers_network